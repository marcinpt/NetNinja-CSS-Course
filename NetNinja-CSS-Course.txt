Lekcja-1
Wprowadzenie do CSS
Co kurs obejmuje:
- Co to jest CSS
- Składania CSS
- Pojecia: element, klasy i ID selektory
- Formatowanie tekstu, tła
- The box model - pola, marginesy, przesunięcia
- Zastosowanie praktyczne - budujemy strone

Lekcja-2
Co to jest CSS?
CSS jako prezentacja HTML.
Nieustannie rozwijany - aktualnie CSS3
Wspierany przez wiekszość przeglądarek.

Poznajemy jak ogromny wpływ ma CSS na wygląd strony poprzez usuniecie i przywrocenie pliku css dla strony TheNetNinja. 
Przy projektowaniu strony wazne aby strona wygladala rownie dobrze na roznych urzadzeniach (PC, smartfony, tablety, smart-TV, ...) i przegladarkach.

Lekcja-3
Domyslne Style Przegladarki
Ważne aby mieć świadomość o dymyslnych css przegladarki poniewaz tworzac wlasne zmieniamy je.
Istnieje tez cos co nazywa sie resetowaniem css przegladarek - ma na celu ujednolicenie wyswietlanie stron jednakowo na wszystkich przegladarkach tylko i wylacznie opartych na wlasnych stylach - ma to swoje plusy i minusy. Z czasem sami bedzemy mogli zdecydowac kiedy i czy w ogole stosowac reset css.

Lekcja-4
Składnia CSS
CSS jako zbiór zasad (rules). Kazda zasada moze dotyczyć odpowiednio każdego okreslonego tagu w html'u. Gdy mamy juz okreslony tag docelowy ustalamy dla niego wizualne wlasciwosci, ktore powodują że wyglada tak jak chcemy.
Dla przykładu mozemy
- okreslic ze wszystkie p tagi jakie sa na calej stronie maja miec czcionke 12px...
- okreslic ze wszystkie p tagi z okreslonym id maja miec czcionke 12px...
- okreslic ze wszystkie tagi w okreslonym id mają miec np pozycje absolutna, gorny margines 0 i lewy 0...

Kazda zasada sklada sie z dwoch czesci - pierwsza od lewej to tzw selektor, druga to deklaracja.
Selektor to porostu okreslenie jakich tagów ma zasada dotyczyć (patrz powyzej). Jesli maja byc związane z jakim ID to nazwa ID musi byc poprzedzona znakiem #. Deklaracja to wlasciwosci wizualne - musza byc zawarte w {}. Przykład:
#page-header {font-size: 10px}
Czyli wszystko co jest w elemencie z id page-header ma miec czionke 10px

Selektory moga wskazywac na wiele rzeczy - nazwy tagow, ID, klas i in. Przyłady:

#header p {declaration} - dotyczy tagow p w div o id header
.comment div {declaration} - dotyczy sekcii div ktore znajdują sie wewn elementów z klasa comment
li {declaration} - wszystkie tagi li jakie sa w dokumencie html

Deklaracje zawierają właśćiwości w parze z ich wartościami. Deklaracja musi byc zawarta w klamrach {} (curly brace), wlasciwosc zakończona : (colon) a cala para musi konczyc się ; (semicolon).
Pary właściwość z ich warosciami mozemy umieszczac - jesli jest ich wiele - jeden za drugim lub jeden pod drugim.
Przykłady:

#selector {font-size: 10px;}

#selector {
	font-size: 10px;
	color: red;
}

Praktyczne zastowowania ww zagadnien w utworzonym pliku syntax.css ktory styluje elementy z index.html (brak linkowania do css bo chodzi tylko o pokazanie składni...).

Lekcja-5.0
Embedded and Inline Styling (czyli implementacja styli jako wbudowane i liniowe).
Powtorzenie jednej z ostatnich lekcji html o sposobach implementacji styli w html.
W tej lekcji omawaimy dwq rodzaje:
 
- style in-line ktore umieszczamy wewn tagow jako wartosc argumentu style (style="..."). Wnetrzem w tym przypadku bedą juz tylko same deklaracje (własciwosc: wartosc;)
Jak wczesniej bylo wspomniane sposob bardzo pracochlonny w przypadku czestych zmian w tagach ktore licznie wystepuja w danym dok (bo wymaga wstawienia/modyfikacji w kazdym tagu osobno). W sytuacji gdy mamy wiele stron bedzie jeszcze bardziej pracochłonne...
Jest jednak dobry gdy mamy do czynienia z pojedynczymi przypadkami gdzie chcemy wyjatkowo wyroznic jakis element niezaleznie od innego "stylowania"

- style wbudowanych czyli w nagłówku html - za pomoca tagow <style></style>, gdzie wewn ustalamy style za 	pomoca selektorów (id, klas i tagow) i deklaracji. Znacznie wygodniejszy od inline ale caly czas problematyczny gdy mamy wiele podstron.

Do cwiczen 
index.html bez zmian
tworzymy plik contakt.html

Lekcja-5.1
Zastosowanie stylów Inline w index.html - zarówno w sekcyjnych tagach div jak i konkretnych pojedynczych tagach p. Zwroc uwage na trudnosc i pracochlonnosc przy tym sposobie stylowania.

Lekcja-5.2
Wczesnejsze stylowanie inline dla tagu p zastepujemy stylowaniem wbudowanycm (embedded) ktory umieszczamy w naglowku html w index.html. Tym razem jest znacznie mniej pracy jednakze takie stylowanie działa tylko dla danej strony - np w naszym przypadku dla contact.html juz nie. Aby takie stylowanie zadziałało w contact.html musimy skopiować tagi i wnetrze - <style>....</style> rowniez do niego.
Zwroc uwage ze i przy tym sposobie - jesli masz np 20 postron - musisz taka operacje powtorzyc wielokrotnie - wiec wbudowane stylowanie tez jest pracochlonne.

Lekcja-5.3.1
W index.html tworzymy naglowek z tagiem p "oznaczony" klasą o nazwie welkome. 
W tym przykladzie pokazujemy ze jesli mamy tylko jeden plik to nie musimy tworzyc zewn pliku css, ktory ma zasieg globalny na wszystkie nasze pliki html - wystarczy wstawic stylowanie wbudowane. W naszysm przykladzie - gdy mamy oznaczona klasa nasz naglowek - tworzymy selektor .welcome i odpowiednie deklaracje.

Lekcja-5.3.2
Uzyskujemy podobny efekt jak wczesniej ale z zastosowaniem inline. Ten sposob tez w tych samych przypadkach tzn gdy mamy jedna strone.

Lekcja-6
External Style Sheets - Zewnetrzne arkusze styli
Powtorka z kusrsu html - Style zawarte w osobnym pliku *.css do ktorego umieszczamy w nagłówku kazdego pliku html link. Kazda zmiana czy ustawienie reguły (rule) w takim pliku oddziaływuje wtedy na kazdy plik html. Jest duzo prostszy i szybszy niz style wbudowane czy inline.
W czesci praktycznej usuwamy  działania styli z poprzedniej lekcji.
Usuwamy wnetrze syntax.css
W index.html i contact.html wstawiamy link do naszego zewn arkusza styli - syntax.css
Przechodzimy do edycji pliku css - tworzymy reguly i sprawdzamy jaki wplyw ma wyglad naszych obu stron html (w przegladarce)

Lekcja-7
CSS comments - komentarze css
Składania komentarzy dla css to:
/* ... */

przykłady uzycia w syntax.css
Komentarze służa do bezpiecznych notatek i opisów ktore nie wpływają na działanie kodu. 
Inne zastosowanie to tymczasowe wyłączenie fragmentu kodu.
Przydatne rowniez do twozenia opisowych naglowkow z informajami od autora kodu.

Lekcja-8
Targeting elements - elementy jako cele
W tej lekcji pokazemy zastosowanie najprostrzych selektorow - wskazujace tagi html'owe.
Na przykładzie contact.html (zostawilismy kilka starych, dodalismy kilka nowych tagów: p, a, span, h1, div) 
Na ich przykładzie stworzylismy zasady (rules) w naszym syntax.css.

Lekcja-9
Classes and ID's
Powtorka lekcji 14 z kursu HTML

Oba sa sposobem na identyfikacje i opis elementow w kodzie html.
Klasy moga byc uzyte wielokrotnie w kodzie strony, ID tylko raz i musza miec nazwe unikalna.
Cwiczenia
w contact.html dodajemy pare nowych linijek w sekcji body: h1 h2 w div z id header, h2 poza nia i 3 linijki span z clas deck. Czyscimy wnetrze syntax.css. Wstawiamy tam zasady:

- dla sel h2 - tu zasieg działania jest na wszystkie h2 jakie sa w doc html.

- dla elementu (ELEMENTU ...nie h2) z id content-header - tu zasieg dzialania tylko na h2 z podanym id (bo tlko h2 znajduje sie w elemencie z podanym id!) - zauwaz! - ze ta zasada nadpisuje styl z poprzedniej zasady! Wazne - przed nazwa id selektora zawsze piszemy "#"
Podobnie jak powyzsze 2 tylko teraz z klasami:

- dla span - zasieg na wszystkie span'y (apropo naszej deklaracji - wlasciwosc display z wartoscia block powoduje wyswietlenie kolejnych elementow od nowej lini).

- dla elementow z klasa deck - tu zasieg na te elementy gdzie mamy klase deck. Podobnie jak wyzej nastepuje nadpisanie wczesniejszej zasady. Wazne - skladnia - przed nazwa klasy selektora zawsze podajemy ".".

Lekcja-10
THE CASCADE & CSS CONFLICTS.
Kiedy wystepuje konflikt? - Jesli mamy w pliku css 2 zasady gdzie selektory sa IDENTYCZNE a w deklaracji zasad wystepuja takie same wlasciwosci ale z roznymi wartosciami. W takiej sytuacji "wygrywa" zasada która jest najnizej kaskady. Kaskady dlatego ze zasady w css aplikuja sie od-gory-do dolu (jak ...wodospad - kaskada). Najnizsza zasada w takich konfliktach nadpisuje zasady górne.
Czasami taki konflikt tworzymy swiadomie - w celu dokonania jak najszybszej zmiany bo wiemy ze jesli ja umiescimy w dolnej czesci pliku css (kaskady) to taka zasada zostanie zastosowana i ostatecznie zwizualizowana w przegladarce. Przyklad:
W oczyszczonym pliku syntax.css zamieszczamy 2 podobne zasady z rozniacymi sie deklaracjami -2x: span{...}
1-szy z kolorowaniem niebieskim, 2ga - czerwonym. Ostatecznie w przegladarce widzimy kolor czerwony.

Kolejny przykład swiadomego tworzenia konfliktu - tym razem z zastosowaniem stylow wbydowanych i inline.
Stosujemy gdy chcemy nadpisac style zawarte w pliku css - wbudowane w kod html nadpisuja external css (plik css), a  nastepnie Inline nadpisują wbudowane (ostateczne). Przyklad w pliku contact.html.

Lekcja-11
Inheritance - dziedziczenie
Struktura tagów w html to - w zakresie tworzenia stylów - struktura dziedziczna. Jesli nadamy jakis styl dla tagu boody to wszystkie tagi bedace w body beda te style dziedziczyć. Chcąc zmienic styl dla konkretnego elementu wewn body musimy go stworzyc glebiej w strukturze - nadpisujac te z body (czyli jest to jakby rodzaj konfliktu swiadomego).

UWAGA - nie wszystkie style sa dzidziczone!!! - to z powodu istnienia styli domyslnych przegladarki. Np a tag nie odziedziczy deklaracji z kolorem czy czionka bo przegladarka w takim przypadku nada im swoje domyslne. DZIEDZICZONE STYLE TO STYLE NIEBEZPOSREDNIE I TAKIE MOGA BYC NADPISANE PRZEZ DOMYSLNE STYLE PRZEGLADARKI. DOPIERO JAWNA ZMIANA CZY NADANIE (BEZPOSREDNIO) STYLU SPOWODUJE JEGO ZASTOSOWANIE.

W Cwiczeniu usuwamy wszystko z syntax.css
w contact.html usuwamy style wbud i inline z poprzed lekcji, robimy 2ga sekcje divami i usuwamy link googla.
Tworzymy w css regule nadajaca kolor czerwony dla body - sprawdzamy w przegl - wszystko czerwone - ok
Nastapilo dziedziczenie stylu nawszystkie el wewn body.
Teraz tworzymy nadpisasnie stylu dziedziczonego (swiadomy konflikt). Tworzymy styl dla tagów div - zmieniamy kolor na niebieski - srawdzamy - wszystko co wewn divów jest niebieskie - ok.
Kolejne nadpisanie - zmieniamy dziedziczony od div kolor p-tagów. Sprawdzamy - sa- zmiany - ok.

Sprawdzamy teraz działanie styli domyslnych rzegladarki - czyli el na ktore nie działa dziedziczenie.
Tworzymy link a w body ale na zewn divów - czyli spodziewamy sie koloru dziedziczonego od body - czerwonego. Sprawdzamy - jest niebieski i podkreslony - to styl domyslny przegladarki.
Pokazujemy co przegladarka robi z tagiem a "poza nazym wzrokiem" zapisujac to jaka regula dla a (na koncu css). Aby jednak zmienic style wystarczy taka regule utworzyc i nadac inne wartosci - nadajemy kolor zolty. Sprawdzamy - jest zolty - ok

Lekcja-12
SELECTOR SPECYFICITY - CZYLI SIŁA (WAGA) SELEKTORÓW.
Konflikty cd...
W CSS Specyficity pomaga nam rozwiązywać problemy z konfliktami.
Gdy selectory sa identyczne to - jak wczesniej bylo - wygrywa ten ktory znajduje sie najnizej.
W przypadku konfliktów gdzie selektory nie są identyczne ale dochodzi do "nałożenia się" zasięgów zasad na jakis element - z pomoca przychodzi siła selektorów zwana SPECYFICITY. Polega ona na punktacji ktora zalezna jest od tego czym poslugujemy sie w danym selektorze - mowimy wtedy ze jakis selektor jest bardziej specyficzny niz inny. I tak jesli w selektorze wystepuje:

ID 's		= 100pkt
Class's		=  10pkt
elemnets (tags) =   1pkt

UWAGA - Specyficznosc selektorów w przypadku konfliktów gdzie wystepuje dziedzizenie (niebezposrednio) nie bedzie mialo znaczenia! Tagi dzieci dzidziczace po rodzicach nie maja juz tej wagi co rodzice! Patrz Cw.3

Cwiczenia:
1sze
Czyscimy syntax.css i oznaczamy sobie 2ga sekcje id'kiem o nazwie main-content
Tworzymy konflikt - 2 zasady - 1sza z uzyciem w selektorze ID, 2ga z uzyciem elementu (tagu). Efekt - konflikt wygrywa 1szy ponieważ ma wieksze specyficity (100pkt+1), a 2gi ma tylko 1pkt. Uwaga tutaj konfliktem jest tylko ten wspolny dla obu zasad p tag i tylko dla niego liczy sie wygranie konfliktu - bedzie czerwony. Pozostale p tagi w dokumencie beda czarne.

2gie - oznaczamy sobie w 2giej sekcji 2gi paragraf klasą o nazwie test (w celu utworzenia selektora wskazujacego na niego). Tworzymy zasade z uzyciem selektora zawierajacego nasza klase gdzie kolorujemy nasz paragraf na zielono. Sprawdzamy - NIE jest zielony! Dlaczego? - bo specyficznosc czyli sila naszego selektora jest za slaba w stosunku do wczesniejszego zawierajacego id (101>10). Dlatego nasza reguła nie zadziała.

Teraz wprowadzimy element gdzie zadziała mechanizm dziedziczennia. Wstawimy tag Strong w 1szy paragraf naszej 2-giej sekcji. Nastepne wprowadzony element o-stylujemy w css i pokazemy tym samym ze styl ten zadziała - bo jak wczesniej wspomnielismy dziedziczenie po rodzicach to tylko dziedziczenie stylu ale bez wagi (siły) i pozniejsza jego zmiana w css - gdzie bedzie tylko 1pkt - bedzie łatwa i mozliwa.

Na powyzszym ost przykladzie pokazujemy 2 sposoby zadziałania naszych stylów na dany element (w naszym przypadku tag strong) Niejawnie poprzez 1sza regule gdzie styl dla strong zostanie odziedziczony od p tagu w tej sekcji, ale w sposób jawny - poprzez wyrazny selektor.
Styl dziedziczony to styl niejawny (implicit), który moge nadpisac w sposob jawny i wyrazny (explicit).

Lekcja-13
THE IMPORTANT DECLARATION
Łamiemy zasady CSS - deklaracja !important to sposób na włączenie stylu bez wzgledu na wszystko, bez wzgledu na pozycje w kaskadzie, domyslne style czy specyficznosc selektora.
Jest to deklaracja qniebezpieczna bo gdy bedziemy ja naduzywac - stracimy kontrole nad zarzadzaniem zasadami.
W Cwiczeniu - przykład z 1sza regula dla p tagu i 2ga dla bardziej specyficznego p tagu w 2 sekcji z podanym id (silniejszy plus to ze nizej). Dodajemy deklaracje !important w 1szej zasadzie - co powoduje wygranie i wlaczenie tego wlasnie stylu dla wszystkich p tagow. Takiej reguly z ta daklaracja nic nie nadpisze.

Stosujemy ja tylko w przypadku bardzo waznych styli i staramy sie nie uzywać jej za czesto.

Lekcja-14
TARGETING MULTIPLE ELEMENTS - WYBIERANIE WIELU ELEMENTOW W JEDEJ REGULE
Scenariusz - mamy pokolorawć na ten sam kolor, rozmiar, grubosc i czionka ma  byc wszedzie taka sama.
Najpierw robimy dla p - potem kopiujemy cala regule kilkukrotnie modyfikujac pozniej w nich selektory.
UWAGA - zamiast tego - mozemy ustawic wszytsko jedna regula dla wielu selektorow. Wypisujemy je odzielajac jeden od 2giego przecinkiem. 
Patrz przyklad syntax.css i contact.html.

Lekcja-15
DESCENDANTS SELECTORS & " "- SELEKTORY POTOMKOW

W contact.html w 2giej sekcji tworzymy podsekcje (zagnizdzony div), syntax.css czyscimy.
Mowimy ze wszystkie tagi w naszej 2 sekcji (dzisiaj na tej bedziemy pracować) to potomstwo tagu nadrzednego - rodzica (div) - podobnie w kolejnym zagniezdzeniu.

W jaki sposób pomaga w css koncept potomstwa?
Powiedzmy ze chcemy nadac styl dla p tagow wewn sekcji2 i wewn podsekcji. Nie chcemy obejmowac stylem p tagu bedacego na zewn sekcji.
Tworzymy selektor skladajacy sie na 1m mcu z elementu-nadrzednego (u nas bedzie to id main-content) a nastepnie po spacji (ktora jest informacja ze kolejny element id, klasa czy tag bedzie elementem-potomkiem) jego potomek.
Teraz gdy zadaniem naszym byloby nadanie stylu p wewn podsekcji - to mozemy tak zmodyfikowac nasz selektor 
- ze zamienimy el-nadrzedny na id z podsekcji
- ze bedzie rozbudowany o id podsekcji, ale wtedy: UWAGA - nasz selektor bedzie wtedy bardzo specyficzny czyli bedzie nam go w razie potrzby trudno nadpisac. Dlatego staramy sie nie rozbudowywac selektorow w ten sposob - tworzymy tak specyficzny aby tylko styl zadziałał.

Lekcja-16
CHILD SELECTORS & COMBINARTOR ">"
Jaka roznica pomiedzy child a decendant - niewielkla: potomkmowie to wszystkie elementy zagniezdzone wewn el nadrzednego, a dziecko to bezposredni potomek rodzica, tylko 1 poziom w glab
Jak tworzymy selektor?
Pomiedzy rodzicem a dzieckiem wstawiamy  tzw kombinator - >
Wiec w odroznieniu do zadania zlekcji-15 regula:

#main-content > p{...}

nada styl tylko bezposrenim dziciom p - a nie wszystkim potomkom jak wczesniej.

Lekcja-17
ADJACENT SELECTORS & COMBINAROR "+" - SELEKTORY NASTEPNIKOW.
Tworzymy nowy plik - articles.html, czyscimy syntax.css
Zadaniem bedzie stworzenie takiego selektora, który nadaje styl tylko dla p znajdujacych sie pod naglowkami h2 sekcji o id all-articles.
Z pomoca przychodzi nam selektor elementow nastepnych bezposrenio przyległych - adjacent selector
Tworzy sie go za pomoca kombinatora +
W naszym przypadku oprocz umieszczenia na 1szym mcu id sekcji na 2gim umieszczamy potomka h2 (a wiec po spacji) i dopiero potem + p

Lekcja-18
ATTRIBUTE SELECTORS - CZYLI SELEKTORY WYKOZYSTUJACE ATRYBUTY ELEMENTOW.
W tej lekcji poznamy selektory które sa precyzowane za pomoca argumentow, argumentow z wartosciami ale takze argumentow zawierajace okreslone fragmenty wartości.
W praktyce selektor zaraz po nazwie elementu ma "[]" w ktorych podajemy jego argument oraz tez pozostałe wspomniane wyzej kombinacje.
Cwiczenie:

Selektory zawierajace atrybut: np span[class]{...} - bierzemy elementy span ale tylko zawierajace atrybut class (bez wzgledu na wartosc, nazwe).

Selektory zawierające atrybut z jego wartoscia - 1szy przyklad z uzyciem tagow span
Kolejny przyklad z zastaosowaniem sekcji div. Tworzymy wczesniej dodatkowa sekcje ale bez atrybutow.

Co jesli chcemy bardziej sprecyzować selektory? Istnieje mozliwosc wiekszego sprecyzowania argumentu - gdzie dodatkowo mozemy okreslic jaka wartosc ma miec - tak jak w html - el[arg="wart"]{...}.
W cwiczeniu stosujemy to na 3cim a tagu.

TERAZ COS CO SIE NAZYWA "PATTERN MATCHING"
Jednym z nich jest np przypadek gdzie element posiada kilka klas - ich nazwy sa podane jako wartosci arg class oddzielne spaacją - np <a class="deck hall". Teraz wiec przyklad gdzie w html w 2gim spanie w arg class 2ga klase a w css w 1 regule wpisujemy tylko 1sza klase deck. 
Teraz 1 regula na ten span nie zadziala bo dokladna wartosc ("deck") to nie ta sama wartosc co w arg class w html'u ("deck hall").
Gdybysmy jednak chcieli zeby 1sza regula zadzialala na wszystkie spany to istnieje cos takiego jak "~" przed znakiem "=". Znaczenie tego to - gdy istnieje deck gdziekolwiek na lisce klas argumentu class.

Czyli 1szt pattern match to ~ (~=)
Analogicznie istnieja jeszcze:
$ (czyli $=) - wartosc konczy sie podanym cigiem np a[href$="pdf"]{...} Tu na przykladzie 2 dolozonych a linkow w htmlu.
Kolejnym pattern-matching to ^ (czyli ^=) - wartosc zaczyna sie podanym ciagiem. W naszym przykladzie nadajemy styl (kolor pink) a linkom ktore sa linkami do zewnetrznych internetowych stron.

Lakcja-19
PSEUDO CLASSES - CZYLI SLOWA-KLUCZE W SELEKTORZE.
Co to sa pseudo klasy?
To slowa klucze umieszczane za selektorami (po :) ktore maja na elementach wykonac jakas okreslona funkcje.
Pseudo Klasy dzielimy na 2 grupy: Dynamiczne i Strukturalne.

Dynamiczne to te które wymuszaja okreslone zachowanie w wyniku jakiejs akcji uzytkownika - np zmiana koloru gdy nad nimi pojawi sie kursor lub gdy klikniemy klawisz na stronie to zamieni sie na klawisz-wcisniety...

Strukturalne klasy pozwalają na nadawanie stylów w sposob bardziej zaawansowany ktory nie jest dostepny poprzez zwykly css - np w przypadku gdy chcemy nadac styl 5-emy elementowi li listy (zadan nie ma id ani class). Innym przypadkiem jest sytuacja gdzy element rodzic nie ma elementów dzieci - nie chcemy aby ostylowac dzieci.

Sa tez takie Pseudo Klasy ktore nie naleza ani do Dynamic ani do Structure...

Przyklady Składni - plik syntax.css

Lekcja-20
PSEUDO KLASY - CD - HOVER, VISITED AND ACTIVE
Poznajemy 3 kolejne pseudo klasy - jedne z najpopularniejszych:
hover - zmiana gdy myszka nad elementem
visited - zmiana gdy wczesniej bylo klikniecie
active - zmiana gdy klikamy.
Przykłady w syntax.css

Lekcja-21
PSEUDO KLASY - CD - PRZYKLADY STRUKTURALNYCH.
Na przykładzie pliku articles.html gdzie tworzymy 2 bloki tym razem zamiast diva korzystamy z article.
Article jest rodzicem ktory ma kilka potomkow. Budujemy selektory ktore wybiora nam 1sze dziecko i ostatnie dziecko tegoz rodzica (a wlasciwie rodzicow bo mamy takie 2 bloki). Nadawjemy im style jak w przykladzie syntax.css.

Lekcja-22
PSEUDO KLASY - CD - FIRST & LAST OF TYPE SELECTORS
Podbna pseudo klasa do poprzedniej tylko tym razem chodzi -pierwsze i -ostatnie dziecko danego typu.
Typem jest np tag p.
Do pliku articles.html wprowadzamy dodatkowo do naszych bloków artukułów: tytuly h2 przed p'pami oraz linie hr na koncu za p'pami.
Efekt - selektory z wczesniejszej lekcji (sa zostawione jako komentaz w syntax.css) skazuja teraz na inne elementy - wlasnie na te nowe bo teraz to one sa 1sze i ost dzieci article.
Zadanie - chcemy jednak - nawet w tej nowej sytuacji - wybrac te same elementy co poprzednio. Z pomoca przychodzi nam kolejna pseudo klasa:
:first-of-type
:last-of-type
Przykład w syntax.css

Lekcja-23
PSEUDO KLASY - CD - NTH CHILD PSEUDO CLASSES.
Tworzymy nowy plik lists.html gdzie wstawiamy lise elementow. 2 z nich maja byc wyroznione - 1szy i 7my:
Poznajemy Pseudo klase ktora wybiera nam okreslony liczba element listy:

:nth-child(x) - gdzie x to jej argument okreslający pozycje na liscie elementow.
Przykład w syntax.css

Poznajemy kolejne kombinacje z pseudo klasa :nth-child
:nth-child(even) - wybiera parzyste elementy listy
lub
:nth-child(odd) - ...nieparzyste

kolejna kombinacja :nth-child(x) - gdzie x moze byc formułą, kombinacja z n np:
:nth-child(2n + 1) - co 3ci
:nth-child(3n + 1) - co 4ty
...

Lekcja-24
PSEUDO KLASY - CD - NTH OF TYPE PSEUDO CLASSES
Zmieniamy plik lists.html - mamy 4 bloki article, 2 nagłowki, przy jednym z nich a i hr pomiedzy; czyscimy syntax.css.
Zadanie wprowadzajace i przypominajace z poprz lekcji - selektor bloku 1szego artykułu:

article:nth-child(2){...} - 2gi child bo 1szy to naglowek h1 "Article".

...BTW - UWAGA:  zauwaz ze nie podajemy - tak samo bylo we wczesniejszych lekcjach - podawac w 1selektorze rodzica.Gdybysmy mieli wiecej divow z dziecmi wewn to takze ich 2gie dziecko tez by ten selektor objal! W takiej sytuacji, jesli bysmy tego nie chcieli musielibysmy sprecyzowac o ktorego rodzica nam chodzi.

Teraz mała sztuczka - uzyskujemy ten sam efekt ale prosciej - nie musimy liczyć od gory ktore to dziecko - teraz wystarczy nam wiedza ze jest to 1sze dziecko typu (article) i UWAGA - tutaj liczymy kolejnosc dzieci ale tylko w ramach tego samego typu!
czyli ten sam efekt uzyskamy przez:

article:nth-of-type(1){...} - bo jest to 1sze dziecko typu article.

Teraz robimy kombinacje z argumentem tej pseudo klasy - odd
Udowadniamy ze obejmujemy tylko typ article a nie uuwzgledniamy tych pomiedzy nimi.

Teraz kombinacja z argumentem z formuła 2n+1 - efekt ten sam co odd

Lekcja-25
COMBINING SELECTORS - SELEKTORY KOMBINOWANE
Modyfikujemy nasz roboczy lists.html i czyscimy css
Teraz mamy 2 bloki article gdzie 1szy ma klase i 2 bloki div gdzie tez 1szy z nich ma klase. Wszystko zagnizdzone w zewn div'ie.

Zadanie - chcemy objac stylami elementy z dana klasa. Kombinacje tak tworzymy laczac (bez spacji!) klase z elementem - oczywiscie - od tylu czyli z prawa dolewa - element.klasa{...}

Takim sposobem mozemy roznie ostylowac elementy z ta sama klasa.

BTW - gdybysmy wstawili spacje pomiedzy klasa a elementem to zmienilibysmy zasieg (objete bylyby wszystkie potomki elementu element ktore zawieraja klase .klasa

Lekcja-26
UNIVERSAL SELECTOR
Selektor uniwersalny to selektor:
*{...} - nadaje styl wszystkim elementom w doc html

Podobne działanie ma selektor body{...} ALE: nie wszystko zostaje ostylowane! Zostały pominiete elementy ktore styluja domyslne style przegladarki(DSP)! Dlaczego - bo ten selektor styluje wszystkie elementy NIEBEZPOSREDNIO a poprzez DZIEDZICZENIE na potomków - a te jak wiemy moga byc zmienione przez DSP (np styl linków a).

Selektor uniwersalny - to selektor który nadaje/zmienia styl wszystkich elementów BEZOPŚREDNIO, a wiec nie moga byc nadpisane przez DSP. Tutaj w przykładzie wszystko jest ostylowane, nawet a.

Przyłady w syntax.css i lists.html (wczesniej zmieniony).

Jakie jest zasosowanie uniwersalnego selektora?
Njczesciej stosowane przez niektórych programistow - tych którzy chcą zresetować ("wyczyścić") Domyślne Style Przeglądarki. Czasami jest to przydatne w celu uzyskania jednolitego wyglądu na kazdej przeglądarce.
Przykład w naszm pliku css.


