Lekcja-1
Wprowadzenie do CSS
Co kurs obejmuje:
- Co to jest CSS
- Składania CSS
- Pojecia: element, klasy i ID selektory
- Formatowanie tekstu, tła
- The box model - pola, marginesy, przesunięcia
- Zastosowanie praktyczne - budujemy strone

Lekcja-2
Co to jest CSS?
CSS jako prezentacja HTML.
Nieustannie rozwijany - aktualnie CSS3
Wspierany przez wiekszość przeglądarek.

Poznajemy jak ogromny wpływ ma CSS na wygląd strony poprzez usuniecie i przywrocenie pliku css dla strony TheNetNinja. 
Przy projektowaniu strony wazne aby strona wygladala rownie dobrze na roznych urzadzeniach (PC, smartfony, tablety, smart-TV, ...) i przegladarkach.

Lekcja-3
Domyslne Style Przegladarki
Ważne aby mieć świadomość o dymyslnych css przegladarki poniewaz tworzac wlasne zmieniamy je.
Istnieje tez cos co nazywa sie resetowaniem css przegladarek - ma na celu ujednolicenie wyswietlanie stron jednakowo na wszystkich przegladarkach tylko i wylacznie opartych na wlasnych stylach - ma to swoje plusy i minusy. Z czasem sami bedzemy mogli zdecydowac kiedy i czy w ogole stosowac reset css.

Lekcja-4
Składnia CSS
CSS jako zbiór zasad (rules). Kazda zasada moze dotyczyć odpowiednio każdego okreslonego tagu w html'u. Gdy mamy juz okreslony tag docelowy ustalamy dla niego wizualne wlasciwosci, ktore powodują że wyglada tak jak chcemy.
Dla przykładu mozemy
- okreslic ze wszystkie p tagi jakie sa na calej stronie maja miec czcionke 12px...
- okreslic ze wszystkie p tagi z okreslonym id maja miec czcionke 12px...
- okreslic ze wszystkie tagi w okreslonym id mają miec np pozycje absolutna, gorny margines 0 i lewy 0...

Kazda zasada sklada sie z dwoch czesci - pierwsza od lewej to tzw selektor, druga to deklaracja.
Selektor to porostu okreslenie jakich tagów ma zasada dotyczyć (patrz powyzej). Jesli maja byc związane z jakim ID to nazwa ID musi byc poprzedzona znakiem #. Deklaracja to wlasciwosci wizualne - musza byc zawarte w {}. Przykład:
#page-header {font-size: 10px}
Czyli wszystko co jest w elemencie z id page-header ma miec czionke 10px

Selektory moga wskazywac na wiele rzeczy - nazwy tagow, ID, klas i in. Przyłady:

#header p {declaration} - dotyczy tagow p w div o id header
.comment div {declaration} - dotyczy sekcii div ktore znajdują sie wewn elementów z klasa comment
li {declaration} - wszystkie tagi li jakie sa w dokumencie html

Deklaracje zawierają właśćiwości w parze z ich wartościami. Deklaracja musi byc zawarta w klamrach {} (curly brace), wlasciwosc zakończona : (colon) a cala para musi konczyc się ; (semicolon).
Pary właściwość z ich warosciami mozemy umieszczac - jesli jest ich wiele - jeden za drugim lub jeden pod drugim.
Przykłady:

#selector {font-size: 10px;}

#selector {
	font-size: 10px;
	color: red;
}

Praktyczne zastowowania ww zagadnien w utworzonym pliku syntax.css ktory styluje elementy z index.html (brak linkowania do css bo chodzi tylko o pokazanie składni...).

Lekcja-5.0
Embedded and Inline Styling (czyli implementacja styli jako wbudowane i liniowe).
Powtorzenie jednej z ostatnich lekcji html o sposobach implementacji styli w html.
W tej lekcji omawaimy dwq rodzaje:
 
- style in-line ktore umieszczamy wewn tagow jako wartosc argumentu style (style="..."). Wnetrzem w tym przypadku bedą juz tylko same deklaracje (własciwosc: wartosc;)
Jak wczesniej bylo wspomniane sposob bardzo pracochlonny w przypadku czestych zmian w tagach ktore licznie wystepuja w danym dok (bo wymaga wstawienia/modyfikacji w kazdym tagu osobno). W sytuacji gdy mamy wiele stron bedzie jeszcze bardziej pracochłonne...
Jest jednak dobry gdy mamy do czynienia z pojedynczymi przypadkami gdzie chcemy wyjatkowo wyroznic jakis element niezaleznie od innego "stylowania"

- style wbudowanych czyli w nagłówku html - za pomoca tagow <style></style>, gdzie wewn ustalamy style za 	pomoca selektorów (id, klas i tagow) i deklaracji. Znacznie wygodniejszy od inline ale caly czas problematyczny gdy mamy wiele podstron.

Do cwiczen 
index.html bez zmian
tworzymy plik contakt.html

Lekcja-5.1
Zastosowanie stylów Inline w index.html - zarówno w sekcyjnych tagach div jak i konkretnych pojedynczych tagach p. Zwroc uwage na trudnosc i pracochlonnosc przy tym sposobie stylowania.

Lekcja-5.2
Wczesnejsze stylowanie inline dla tagu p zastepujemy stylowaniem wbudowanycm (embedded) ktory umieszczamy w naglowku html w index.html. Tym razem jest znacznie mniej pracy jednakze takie stylowanie działa tylko dla danej strony - np w naszym przypadku dla contact.html juz nie. Aby takie stylowanie zadziałało w contact.html musimy skopiować tagi i wnetrze - <style>....</style> rowniez do niego.
Zwroc uwage ze i przy tym sposobie - jesli masz np 20 postron - musisz taka operacje powtorzyc wielokrotnie - wiec wbudowane stylowanie tez jest pracochlonne.

Lekcja-5.3.1
W index.html tworzymy naglowek z tagiem p "oznaczony" klasą o nazwie welkome. 
W tym przykladzie pokazujemy ze jesli mamy tylko jeden plik to nie musimy tworzyc zewn pliku css, ktory ma zasieg globalny na wszystkie nasze pliki html - wystarczy wstawic stylowanie wbudowane. W naszysm przykladzie - gdy mamy oznaczona klasa nasz naglowek - tworzymy selektor .welcome i odpowiednie deklaracje.

Lekcja-5.3.2
Uzyskujemy podobny efekt jak wczesniej ale z zastosowaniem inline. Ten sposob tez w tych samych przypadkach tzn gdy mamy jedna strone.

Lekcja-6
External Style Sheets - Zewnetrzne arkusze styli
Powtorka z kusrsu html - Style zawarte w osobnym pliku *.css do ktorego umieszczamy w nagłówku kazdego pliku html link. Kazda zmiana czy ustawienie reguły (rule) w takim pliku oddziaływuje wtedy na kazdy plik html. Jest duzo prostszy i szybszy niz style wbudowane czy inline.
W czesci praktycznej usuwamy  działania styli z poprzedniej lekcji.
Usuwamy wnetrze syntax.css
W index.html i contact.html wstawiamy link do naszego zewn arkusza styli - syntax.css
Przechodzimy do edycji pliku css - tworzymy reguly i sprawdzamy jaki wplyw ma wyglad naszych obu stron html (w przegladarce)

Lekcja-7
CSS comments - komentarze css
Składania komentarzy dla css to:
/* ... */

przykłady uzycia w syntax.css
Komentarze służa do bezpiecznych notatek i opisów ktore nie wpływają na działanie kodu. 
Inne zastosowanie to tymczasowe wyłączenie fragmentu kodu.
Przydatne rowniez do twozenia opisowych naglowkow z informajami od autora kodu.

Lekcja-8
Targeting elements - elementy jako cele
W tej lekcji pokazemy zastosowanie najprostrzych selektorow - wskazujace tagi html'owe.
Na przykładzie contact.html (zostawilismy kilka starych, dodalismy kilka nowych tagów: p, a, span, h1, div) 
Na ich przykładzie stworzylismy zasady (rules) w naszym syntax.css.

Lekcja-9
Classes and ID's
Powtorka lekcji 14 z kursu HTML

Oba sa sposobem na identyfikacje i opis elementow w kodzie html.
Klasy moga byc uzyte wielokrotnie w kodzie strony, ID tylko raz i musza miec nazwe unikalna.
Cwiczenia
w contact.html dodajemy pare nowych linijek w sekcji body: h1 h2 w div z id header, h2 poza nia i 3 linijki span z clas deck. Czyscimy wnetrze syntax.css. Wstawiamy tam zasady:

- dla sel h2 - tu zasieg działania jest na wszystkie h2 jakie sa w doc html.

- dla elementu (ELEMENTU ...nie h2) z id content-header - tu zasieg dzialania tylko na h2 z podanym id (bo tlko h2 znajduje sie w elemencie z podanym id!) - zauwaz! - ze ta zasada nadpisuje styl z poprzedniej zasady! Wazne - przed nazwa id selektora zawsze piszemy "#"
Podobnie jak powyzsze 2 tylko teraz z klasami:

- dla span - zasieg na wszystkie span'y (apropo naszej deklaracji - wlasciwosc display z wartoscia block powoduje wyswietlenie kolejnych elementow od nowej lini).

- dla elementow z klasa deck - tu zasieg na te elementy gdzie mamy klase deck. Podobnie jak wyzej nastepuje nadpisanie wczesniejszej zasady. Wazne - skladnia - przed nazwa klasy selektora zawsze podajemy ".".

Lekcja-10
THE CASCADE & CSS CONFLICTS.
Kiedy wystepuje konflikt? - Jesli mamy w pliku css 2 zasady gdzie selektory sa IDENTYCZNE a w deklaracji zasad wystepuja takie same wlasciwosci ale z roznymi wartosciami. W takiej sytuacji "wygrywa" zasada która jest najnizej kaskady. Kaskady dlatego ze zasady w css aplikuja sie od-gory-do dolu (jak ...wodospad - kaskada). Najnizsza zasada w takich konfliktach nadpisuje zasady górne.
Czasami taki konflikt tworzymy swiadomie - w celu dokonania jak najszybszej zmiany bo wiemy ze jesli ja umiescimy w dolnej czesci pliku css (kaskady) to taka zasada zostanie zastosowana i ostatecznie zwizualizowana w przegladarce. Przyklad:
W oczyszczonym pliku syntax.css zamieszczamy 2 podobne zasady z rozniacymi sie deklaracjami -2x: span{...}
1-szy z kolorowaniem niebieskim, 2ga - czerwonym. Ostatecznie w przegladarce widzimy kolor czerwony.

Kolejny przykład swiadomego tworzenia konfliktu - tym razem z zastosowaniem stylow wbydowanych i inline.
Stosujemy gdy chcemy nadpisac style zawarte w pliku css - wbudowane w kod html nadpisuja external css (plik css), a  nastepnie Inline nadpisują wbudowane (ostateczne). Przyklad w pliku contact.html.

Lekcja-11
Inheritance - dziedziczenie
Struktura tagów w html to - w zakresie tworzenia stylów - struktura dziedziczna. Jesli nadamy jakis styl dla tagu boody to wszystkie tagi bedace w body beda te style dziedziczyć. Chcąc zmienic styl dla konkretnego elementu wewn body musimy go stworzyc glebiej w strukturze - nadpisujac te z body (czyli jest to jakby rodzaj konfliktu swiadomego).

UWAGA - nie wszystkie style sa dzidziczone!!! - to z powodu istnienia styli domyslnych przegladarki. Np a tag nie odziedziczy deklaracji z kolorem czy czionka bo przegladarka w takim przypadku nada im swoje domyslne. DZIEDZICZONE STYLE TO STYLE NIEBEZPOSREDNIE I TAKIE MOGA BYC NADPISANE PRZEZ DOMYSLNE STYLE PRZEGLADARKI. DOPIERO JAWNA ZMIANA CZY NADANIE (BEZPOSREDNIO) STYLU SPOWODUJE JEGO ZASTOSOWANIE.

W Cwiczeniu usuwamy wszystko z syntax.css
w contact.html usuwamy style wbud i inline z poprzed lekcji, robimy 2ga sekcje divami i usuwamy link googla.
Tworzymy w css regule nadajaca kolor czerwony dla body - sprawdzamy w przegl - wszystko czerwone - ok
Nastapilo dziedziczenie stylu nawszystkie el wewn body.
Teraz tworzymy nadpisasnie stylu dziedziczonego (swiadomy konflikt). Tworzymy styl dla tagów div - zmieniamy kolor na niebieski - srawdzamy - wszystko co wewn divów jest niebieskie - ok.
Kolejne nadpisanie - zmieniamy dziedziczony od div kolor p-tagów. Sprawdzamy - sa- zmiany - ok.

Sprawdzamy teraz działanie styli domyslnych rzegladarki - czyli el na ktore nie działa dziedziczenie.
Tworzymy link a w body ale na zewn divów - czyli spodziewamy sie koloru dziedziczonego od body - czerwonego. Sprawdzamy - jest niebieski i podkreslony - to styl domyslny przegladarki.
Pokazujemy co przegladarka robi z tagiem a "poza nazym wzrokiem" zapisujac to jaka regula dla a (na koncu css). Aby jednak zmienic style wystarczy taka regule utworzyc i nadac inne wartosci - nadajemy kolor zolty. Sprawdzamy - jest zolty - ok

Lekcja-12
SELECTOR SPECYFICITY - CZYLI SIŁA (WAGA) SELEKTORÓW.
Konflikty cd...
W CSS Specyficity pomaga nam rozwiązywać problemy z konfliktami.
Gdy selectory sa identyczne to - jak wczesniej bylo - wygrywa ten ktory znajduje sie najnizej.
W przypadku konfliktów gdzie selektory nie są identyczne ale dochodzi do "nałożenia się" zasięgów zasad na jakis element - z pomoca przychodzi siła selektorów zwana SPECYFICITY. Polega ona na punktacji ktora zalezna jest od tego czym poslugujemy sie w danym selektorze - mowimy wtedy ze jakis selektor jest bardziej specyficzny niz inny. I tak jesli w selektorze wystepuje:

ID 's		= 100pkt
Class's		=  10pkt
elemnets (tags) =   1pkt

UWAGA - Specyficznosc selektorów w przypadku konfliktów gdzie wystepuje dziedzizenie (niebezposrednio) nie bedzie mialo znaczenia! Tagi dzieci dzidziczace po rodzicach nie maja juz tej wagi co rodzice! Patrz Cw.3

Cwiczenia:
1sze
Czyscimy syntax.css i oznaczamy sobie 2ga sekcje id'kiem o nazwie main-content
Tworzymy konflikt - 2 zasady - 1sza z uzyciem w selektorze ID, 2ga z uzyciem elementu (tagu). Efekt - konflikt wygrywa 1szy ponieważ ma wieksze specyficity (100pkt+1), a 2gi ma tylko 1pkt. Uwaga tutaj konfliktem jest tylko ten wspolny dla obu zasad p tag i tylko dla niego liczy sie wygranie konfliktu - bedzie czerwony. Pozostale p tagi w dokumencie beda czarne.

2gie - oznaczamy sobie w 2giej sekcji 2gi paragraf klasą o nazwie test (w celu utworzenia selektora wskazujacego na niego). Tworzymy zasade z uzyciem selektora zawierajacego nasza klase gdzie kolorujemy nasz paragraf na zielono. Sprawdzamy - NIE jest zielony! Dlaczego? - bo specyficznosc czyli sila naszego selektora jest za slaba w stosunku do wczesniejszego zawierajacego id (101>10). Dlatego nasza reguła nie zadziała.

Teraz wprowadzimy element gdzie zadziała mechanizm dziedziczennia. Wstawimy tag Strong w 1szy paragraf naszej 2-giej sekcji. Nastepne wprowadzony element o-stylujemy w css i pokazemy tym samym ze styl ten zadziała - bo jak wczesniej wspomnielismy dziedziczenie po rodzicach to tylko dziedziczenie stylu ale bez wagi (siły) i pozniejsza jego zmiana w css - gdzie bedzie tylko 1pkt - bedzie łatwa i mozliwa.

Na powyzszym ost przykladzie pokazujemy 2 sposoby zadziałania naszych stylów na dany element (w naszym przypadku tag strong) Niejawnie poprzez 1sza regule gdzie styl dla strong zostanie odziedziczony od p tagu w tej sekcji, ale w sposób jawny - poprzez wyrazny selektor.
Styl dziedziczony to styl niejawny (implicit), który moge nadpisac w sposob jawny i wyrazny (explicit).

Lekcja-13
THE IMPORTANT DECLARATION
Łamiemy zasady CSS - deklaracja !important to sposób na włączenie stylu bez wzgledu na wszystko, bez wzgledu na pozycje w kaskadzie, domyslne style czy specyficznosc selektora.
Jest to deklaracja qniebezpieczna bo gdy bedziemy ja naduzywac - stracimy kontrole nad zarzadzaniem zasadami.
W Cwiczeniu - przykład z 1sza regula dla p tagu i 2ga dla bardziej specyficznego p tagu w 2 sekcji z podanym id (silniejszy plus to ze nizej). Dodajemy deklaracje !important w 1szej zasadzie - co powoduje wygranie i wlaczenie tego wlasnie stylu dla wszystkich p tagow. Takiej reguly z ta daklaracja nic nie nadpisze.

Stosujemy ja tylko w przypadku bardzo waznych styli i staramy sie nie uzywać jej za czesto.

Lekcja-14
TARGETING MULTIPLE ELEMENTS - WYBIERANIE WIELU ELEMENTOW W JEDEJ REGULE
Scenariusz - mamy pokolorawć na ten sam kolor, rozmiar, grubosc i czionka ma  byc wszedzie taka sama.
Najpierw robimy dla p - potem kopiujemy cala regule kilkukrotnie modyfikujac pozniej w nich selektory.
UWAGA - zamiast tego - mozemy ustawic wszytsko jedna regula dla wielu selektorow. Wypisujemy je odzielajac jeden od 2giego przecinkiem. 
Patrz przyklad syntax.css i contact.html.

Lekcja-15
DESCENDANTS SELECTORS & " "- SELEKTORY POTOMKOW

W contact.html w 2giej sekcji tworzymy podsekcje (zagnizdzony div), syntax.css czyscimy.
Mowimy ze wszystkie tagi w naszej 2 sekcji (dzisiaj na tej bedziemy pracować) to potomstwo tagu nadrzednego - rodzica (div) - podobnie w kolejnym zagniezdzeniu.

W jaki sposób pomaga w css koncept potomstwa?
Powiedzmy ze chcemy nadac styl dla p tagow wewn sekcji2 i wewn podsekcji. Nie chcemy obejmowac stylem p tagu bedacego na zewn sekcji.
Tworzymy selektor skladajacy sie na 1m mcu z elementu-nadrzednego (u nas bedzie to id main-content) a nastepnie po spacji (ktora jest informacja ze kolejny element id, klasa czy tag bedzie elementem-potomkiem) jego potomek.
Teraz gdy zadaniem naszym byloby nadanie stylu p wewn podsekcji - to mozemy tak zmodyfikowac nasz selektor 
- ze zamienimy el-nadrzedny na id z podsekcji
- ze bedzie rozbudowany o id podsekcji, ale wtedy: UWAGA - nasz selektor bedzie wtedy bardzo specyficzny czyli bedzie nam go w razie potrzby trudno nadpisac. Dlatego staramy sie nie rozbudowywac selektorow w ten sposob - tworzymy tak specyficzny aby tylko styl zadziałał.

Lekcja-16
CHILD SELECTORS & COMBINARTOR ">"
Jaka roznica pomiedzy child a decendant - niewielkla: potomkmowie to wszystkie elementy zagniezdzone wewn el nadrzednego, a dziecko to bezposredni potomek rodzica, tylko 1 poziom w glab
Jak tworzymy selektor?
Pomiedzy rodzicem a dzieckiem wstawiamy  tzw kombinator - >
Wiec w odroznieniu do zadania zlekcji-15 regula:

#main-content > p{...}

nada styl tylko bezposrenim dziciom p - a nie wszystkim potomkom jak wczesniej.

Lekcja-17
ADJACENT SELECTORS & COMBINAROR "+" - SELEKTORY NASTEPNIKOW.
Tworzymy nowy plik - articles.html, czyscimy syntax.css
Zadaniem bedzie stworzenie takiego selektora, który nadaje styl tylko dla p znajdujacych sie pod naglowkami h2 sekcji o id all-articles.
Z pomoca przychodzi nam selektor elementow nastepnych bezposrenio przyległych - adjacent selector
Tworzy sie go za pomoca kombinatora +
W naszym przypadku oprocz umieszczenia na 1szym mcu id sekcji na 2gim umieszczamy potomka h2 (a wiec po spacji) i dopiero potem + p

Lekcja-18
ATTRIBUTE SELECTORS - CZYLI SELEKTORY WYKOZYSTUJACE ATRYBUTY ELEMENTOW.
W tej lekcji poznamy selektory które sa precyzowane za pomoca argumentow, argumentow z wartosciami ale takze argumentow zawierajace okreslone fragmenty wartości.
W praktyce selektor zaraz po nazwie elementu ma "[]" w ktorych podajemy jego argument oraz tez pozostałe wspomniane wyzej kombinacje.
Cwiczenie:

Selektory zawierajace atrybut: np span[class]{...} - bierzemy elementy span ale tylko zawierajace atrybut class (bez wzgledu na wartosc, nazwe).

Selektory zawierające atrybut z jego wartoscia - 1szy przyklad z uzyciem tagow span
Kolejny przyklad z zastaosowaniem sekcji div. Tworzymy wczesniej dodatkowa sekcje ale bez atrybutow.

Co jesli chcemy bardziej sprecyzować selektory? Istnieje mozliwosc wiekszego sprecyzowania argumentu - gdzie dodatkowo mozemy okreslic jaka wartosc ma miec - tak jak w html - el[arg="wart"]{...}.
W cwiczeniu stosujemy to na 3cim a tagu.

TERAZ COS CO SIE NAZYWA "PATTERN MATCHING"
Jednym z nich jest np przypadek gdzie element posiada kilka klas - ich nazwy sa podane jako wartosci arg class oddzielne spaacją - np <a class="deck hall". Teraz wiec przyklad gdzie w html w 2gim spanie w arg class 2ga klase a w css w 1 regule wpisujemy tylko 1sza klase deck. 
Teraz 1 regula na ten span nie zadziala bo dokladna wartosc ("deck") to nie ta sama wartosc co w arg class w html'u ("deck hall").
Gdybysmy jednak chcieli zeby 1sza regula zadzialala na wszystkie spany to istnieje cos takiego jak "~" przed znakiem "=". Znaczenie tego to - gdy istnieje deck gdziekolwiek na lisce klas argumentu class.

Czyli 1szt pattern match to ~ (~=)
Analogicznie istnieja jeszcze:
$ (czyli $=) - wartosc konczy sie podanym cigiem np a[href$="pdf"]{...} Tu na przykladzie 2 dolozonych a linkow w htmlu.
Kolejnym pattern-matching to ^ (czyli ^=) - wartosc zaczyna sie podanym ciagiem. W naszym przykladzie nadajemy styl (kolor pink) a linkom ktore sa linkami do zewnetrznych internetowych stron.

Lakcja-19
PSEUDO CLASSES - CZYLI SLOWA-KLUCZE W SELEKTORZE.
Co to sa pseudo klasy?
To slowa klucze umieszczane za selektorami (po :) ktore maja na elementach wykonac jakas okreslona funkcje.
Pseudo Klasy dzielimy na 2 grupy: Dynamiczne i Strukturalne.

Dynamiczne to te które wymuszaja okreslone zachowanie w wyniku jakiejs akcji uzytkownika - np zmiana koloru gdy nad nimi pojawi sie kursor lub gdy klikniemy klawisz na stronie to zamieni sie na klawisz-wcisniety...

Strukturalne klasy pozwalają na nadawanie stylów w sposob bardziej zaawansowany ktory nie jest dostepny poprzez zwykly css - np w przypadku gdy chcemy nadac styl 5-emy elementowi li listy (zadan nie ma id ani class). Innym przypadkiem jest sytuacja gdzy element rodzic nie ma elementów dzieci - nie chcemy aby ostylowac dzieci.

Sa tez takie Pseudo Klasy ktore nie naleza ani do Dynamic ani do Structure...

Przyklady Składni - plik syntax.css

Lekcja-20
PSEUDO KLASY - CD - HOVER, VISITED AND ACTIVE
Poznajemy 3 kolejne pseudo klasy - jedne z najpopularniejszych:
hover - zmiana gdy myszka nad elementem
visited - zmiana gdy wczesniej bylo klikniecie
active - zmiana gdy klikamy.
Przykłady w syntax.css

Lekcja-21
PSEUDO KLASY - CD - PRZYKLADY STRUKTURALNYCH.
Na przykładzie pliku articles.html gdzie tworzymy 2 bloki tym razem zamiast diva korzystamy z article.
Article jest rodzicem ktory ma kilka potomkow. Budujemy selektory ktore wybiora nam 1sze dziecko i ostatnie dziecko tegoz rodzica (a wlasciwie rodzicow bo mamy takie 2 bloki). Nadawjemy im style jak w przykladzie syntax.css.

Lekcja-22
PSEUDO KLASY - CD - FIRST & LAST OF TYPE SELECTORS
Podbna pseudo klasa do poprzedniej tylko tym razem chodzi -pierwsze i -ostatnie dziecko danego typu.
Typem jest np tag p.
Do pliku articles.html wprowadzamy dodatkowo do naszych bloków artukułów: tytuly h2 przed p'pami oraz linie hr na koncu za p'pami.
Efekt - selektory z wczesniejszej lekcji (sa zostawione jako komentaz w syntax.css) skazuja teraz na inne elementy - wlasnie na te nowe bo teraz to one sa 1sze i ost dzieci article.
Zadanie - chcemy jednak - nawet w tej nowej sytuacji - wybrac te same elementy co poprzednio. Z pomoca przychodzi nam kolejna pseudo klasa:
:first-of-type
:last-of-type
Przykład w syntax.css

Lekcja-23
PSEUDO KLASY - CD - NTH CHILD PSEUDO CLASSES.
Tworzymy nowy plik lists.html gdzie wstawiamy lise elementow. 2 z nich maja byc wyroznione - 1szy i 7my:
Poznajemy Pseudo klase ktora wybiera nam okreslony liczba element listy:

:nth-child(x) - gdzie x to jej argument okreslający pozycje na liscie elementow.
Przykład w syntax.css

Poznajemy kolejne kombinacje z pseudo klasa :nth-child
:nth-child(even) - wybiera parzyste elementy listy
lub
:nth-child(odd) - ...nieparzyste

kolejna kombinacja :nth-child(x) - gdzie x moze byc formułą, kombinacja z n np:
:nth-child(2n + 1) - co 3ci
:nth-child(3n + 1) - co 4ty
...

Lekcja-24
PSEUDO KLASY - CD - NTH OF TYPE PSEUDO CLASSES
Zmieniamy plik lists.html - mamy 4 bloki article, 2 nagłowki, przy jednym z nich a i hr pomiedzy; czyscimy syntax.css.
Zadanie wprowadzajace i przypominajace z poprz lekcji - selektor bloku 1szego artykułu:

article:nth-child(2){...} - 2gi child bo 1szy to naglowek h1 "Article".

...BTW - UWAGA:  zauwaz ze nie podajemy - tak samo bylo we wczesniejszych lekcjach - podawac w 1selektorze rodzica.Gdybysmy mieli wiecej divow z dziecmi wewn to takze ich 2gie dziecko tez by ten selektor objal! W takiej sytuacji, jesli bysmy tego nie chcieli musielibysmy sprecyzowac o ktorego rodzica nam chodzi.

Teraz mała sztuczka - uzyskujemy ten sam efekt ale prosciej - nie musimy liczyć od gory ktore to dziecko - teraz wystarczy nam wiedza ze jest to 1sze dziecko typu (article) i UWAGA - tutaj liczymy kolejnosc dzieci ale tylko w ramach tego samego typu!
czyli ten sam efekt uzyskamy przez:

article:nth-of-type(1){...} - bo jest to 1sze dziecko typu article.

Teraz robimy kombinacje z argumentem tej pseudo klasy - odd
Udowadniamy ze obejmujemy tylko typ article a nie uuwzgledniamy tych pomiedzy nimi.

Teraz kombinacja z argumentem z formuła 2n+1 - efekt ten sam co odd

Lekcja-25
COMBINING SELECTORS - SELEKTORY KOMBINOWANE
Modyfikujemy nasz roboczy lists.html i czyscimy css
Teraz mamy 2 bloki article gdzie 1szy ma klase i 2 bloki div gdzie tez 1szy z nich ma klase. Wszystko zagnizdzone w zewn div'ie.

Zadanie - chcemy objac stylami elementy z dana klasa. Kombinacje tak tworzymy laczac (bez spacji!) klase z elementem - oczywiscie - od tylu czyli z prawa dolewa - element.klasa{...}

Takim sposobem mozemy roznie ostylowac elementy z ta sama klasa.

BTW - gdybysmy wstawili spacje pomiedzy klasa a elementem to zmienilibysmy zasieg (objete bylyby wszystkie potomki elementu element ktore zawieraja klase .klasa

Lekcja-26
UNIVERSAL SELECTOR
Selektor uniwersalny to selektor:
*{...} - nadaje styl wszystkim elementom w doc html

Podobne działanie ma selektor body{...} ALE: nie wszystko zostaje ostylowane! Zostały pominiete elementy ktore styluja domyslne style przegladarki(DSP)! Dlaczego - bo ten selektor styluje wszystkie elementy NIEBEZPOSREDNIO a poprzez DZIEDZICZENIE na potomków - a te jak wiemy moga byc zmienione przez DSP (np styl linków a).

Selektor uniwersalny - to selektor który nadaje/zmienia styl wszystkich elementów BEZOPŚREDNIO, a wiec nie moga byc nadpisane przez DSP. Tutaj w przykładzie wszystko jest ostylowane, nawet a.

Przyłady w syntax.css i lists.html (wczesniej zmieniony).

Jakie jest zasosowanie uniwersalnego selektora?
Njczesciej stosowane przez niektórych programistow - tych którzy chcą zresetować ("wyczyścić") Domyślne Style Przeglądarki. Czasami jest to przydatne w celu uzyskania jednolitego wyglądu na kazdej przeglądarce.
Przykład w naszm pliku css.

Lekcja-27
FONT SIZE
W tej lekcji skupimy sie tym razem na deklaracji reguły, a dokładnie na wlasciwosci font-size
Rozmiar czcionki mozemy okreslic na 2 sposoby:
absolute - za pomoca pixeli (px)
relative - za pomoca em'sów (em) lub procentow (%)
Przechodzimy do plików roboczych:
articles.html i wyczyszczony wczesniej syntax.css

Zad1 - okreslamy rozmiar czcionki w sposob ABSOLUTE nadajac styl bezposrednio elementom: h1 h2 i p poprzez font-size z wartosciami odpowiednio 48px 32px 16px
Sprawdzamy wyswietlanie - ok Sprawdzamy w trybie inspekcji F12 w Chromie ze nasze style nadpisuja DSP - ok

Zad2 - usuwamay wszystko (zakomentujemy) i teraz omowimy sposob RELATIVE
Na poczatku nadajmy styl poprzez DZIEDZICZENIE czyli selektor do elementu article poprze font-size z wart 16px
Kolejne nadania stylow dla ementow to bedzie nadpisanie tych dziedziczonych - czyli juz bezposrednio ale tym razem w deklaracji uzyjemy:

- dla selektora article h2{...} (wykozystujemy budowe sel dla potomka) - okreslamy wartosc font-size'a w em'ach. Oznacza on dokładnie ile razy wiecej wartosci dziedziczonej od rodzica.

-dla p - analogicznie - ale teraz ile procent wart dziedziczonej od rodzica.

Pomiar relative jest glownie wykorzystywany w projektowaniu responsywnym (projekty elastyczne, reagujące)

Lekcja-28
FONT FAMILY
Krój czcionki okreslamy w deklaracji za pomoca właściwości font-family
Jesli okreslimy jej wartość jako np arial a w systemie jej nie bedzie to przegladarka uzyje Czionki z DSP (np Time News Roman). Gdy nie chcemy tego to budujemy tzw stack fontow - czyli jesli nie ma 1szego to wez 2gi w kolejnosci, jesli nie ma znowu to wez 3ci, jesli nie ma zadnego to DSP.
Patrz przyklad w syntax.css i articles.html.

Lekcja-29
TEXT DECORATION
Co to jest ttext-decoration - to własciwosc ktora nadaje np podkreslenie da linków - domyslnie przez DBS (en: Default Browser Style, pl: DSP) czyli underline.

jakie jeszcze mamy "tekst-dekoracje"
Experyment w dzidziczeniem - nadajemy styl tekstu dla rodzicow a-linkow overline (linia nad tekstem), a dla a nadajemy dla wlasciwosci txt-decoration wartosc INHERIT - to spowoduje wymuszenie dziedziczenia od rodzica - bo normalnie (jak we wczesniejszych lekcja bylo omawiane) elemnty a nie odziedziczylyby stylu od rodzicow tylko przez DBS.

Co jeszcze - przyklady
line-through - przekreslenie teksty

Czyli tak wlasciwie mamy tylk 3 dekoracje tekstu bo pozostale to none i inherit.

Lekcja-30
FONT WEIGHT - czyli grubość czcionki
Pracujemy na syntax.css i index.html
Nadpisujemy styl z DBS dla h1 - poprzez font-weight nadajac mu warosc normal. Sprawdzamy - tytul stracil masywnosc nie jest juz pogrubiony.
Sprawdzamy pozostałe na p tagu:
bolder - pogrubiony podobny do bold
normal - normalny - jak domyslne
lighter - oznacza cienki tekst - ALE! - nie zmienilo sie nic! Dlaczego?
Dlatego ze rodzina czcionek DBS to Times New Roman, która nie ma opcji lighter. Wniosek: Nie wszystkie czcionki maja opcje bold czy lighter czy inne...
W zwiazku z powyzszym - jedna z czcionek ktora ma wszystkie 3 opcje to np Yu Gothic. Testujemy:
stylujemy p przez font-weight jako normal i font-family jako "Yu Gothic" (UWAGA - nazwe czcionek skladajacej sie z kilku wyrazow ze spacja w sr musimy objac "...").
Nastepnie probujemy jeszcze raz lighter ale z ta czcionka - jest efekt - ciensza teraz.

Teraz sprawdzamy wartosci dla wlasciwosci text-weight liczbowe: mamy od 100-900. Ogolnie: 100-300 light, 400-600 normal, 700-900 bold.
UWAGA - tu tak samo jak wczesniej - nie wszystkie czcionki maja (wspieraja) wszystkie wartosci.

Lekcja-31
TEXT TRANSFORM - OPERACJE NA TEKSCIE
Pliki robocze index.html i syntax.css
Poznajemy zastosowanie text-transform:
capitalize - kapitalizacja czyli kazde slowo zaczyna sie z wielkiej litery
Na koniec zastsoswanie z none:
dzieci (lub inaczej bezposreni potomkowie) dziedzicza deklaracje od body ale dzieci p nadpisuja "wyczyszczającą" regułą.

Lekcja-32
TEXT COLOUR
Istnieją 2 typy wlasciwosci od kolorowania:
- text / foreground colour
- background colour
Różnica jest taka ze 1sza dotyczy tekstu - uzywamy właściwości color. Wartosci czyli kolory mozemy okreslac na bardzo wiele sposobow - w tej lekcji nie bedziemwy wszystkich poznawać -  mamy 1 przyklad z forma kodu szesnastkowego gdzie na poczatku podajemy #

2gi dotczy podkladu tekstu i jest nadawany włąsciwością background-color i wartosci podobnie jak z 1szym.
Jest jeszcze bardzo podobna wlasc - background - ktora dziala tak samo ale ma rozszezone mozliwosci np o umieszczenie grafiki.

Lekcja-33
STYLING LINKS
Stylizujemy linki
Jak wyzej pliki index.html i syntax.css
W index.html wstawiamy 3x link
Sprawdzamy w przegld - linki wygladaja standardowo - style z DBS

Teraz my - uznajemy ze styl z DBS nam nie pasuje wiec tworzymy swoje
w css robimy regule dla linkow gdzie
nadajemy kolor txx - colour
ustwaiamy text-decoration na none - czyli czyscimy underline
font-weight na bold

Teraz dla urozmicenia korzystamy z pseudo klasy
ustawiamy zachowanie gdy hover myszka
zmiana koloru txt
underline
background-color na jakis kolor
jest cool :)

Lekcja-34
LETTER SPACING $ LINE HEIGHT
Co to sa za pojęcia
L e t t e r - letter spacing czyli odleglosci miedzy literami (jest jeszcze cos takiego jak word spacing)
line hight to odleglosci pomiedzy liniami tekstu.

Przechodzimy do plików roboczych:
Przygotowujemy index.html i czyscimy syntax.css
W index robimy wprowadzamy zmiany - Mamy 3 duze paragrafy w divie razem z h1 na czele bloku. W naglowku dodajemy style wbudowane gdzie okeslamy style - wylacznie w celach estetycznych...

Zaczynamy w syntax.css:
sylizujemy paragrafy p - rozmiar txt i wlasnie letter-spacing. Zauwazamay ze w podpowiedzi mamy tylko normal i inherit ale mozemy sami okreslic wartosc - np w px. Patrz przyklad.
Probujemy tez word-spacing.

Teraz line-height - odleglosci pionowe miedzy liniami. Dawjemy 24px. Sprawdzamay - co jest - nie wyglada na 24px! - wyglada raczej na 12 - Dlaczego? Bo line-height oresla WYSOKOŚĆ LINII a nie odleglosci pomiedzy nimi (gap)! Jesli damy 0 to kazda nowa linia bedzie sie zaczynac od tego samego miejsca - linie beda sie pokrywac. 
I jeszcze mala uwaga - poniewaz fonty maja 12px to wysokosc lini automatycznie tez przybierze ta sama wartosc.
WIEC REANSUMUJĄC - jesli dalismy 24px to trzeba wziasc pod uwage 12px wysokosci fontow i tym samym 12px bedzie na przestrzen pomiedzy nimi.

Powiedzielismy wczesniej ze do okreslenia wartosci mozemy uzyc em'sy:
Uzylismy je w deklaracji
letter-spacing
Wspomnielismy ze wlasciwosci z em'sami biora wartosc dziedziczona i jesli "wyzej" mamy 2em to bedzie 2x ta wartosc. To nie jest ten przypadek bo dzidziczenie odbywa sie od rodzica a rodzicem dla p jest body gdzie nie mamy zadnego okreslenia letter-spacing. Nie mniej jednak, jesli - tak jak u nas - nawet w tej samej regule jest wczesniej okreslenie rozmiaru tekstu w px to wlasciwosc z em'sami "weżmie" TĄ wartosc do przeliczenia. 
Patrz przykład: w tej samej regule dot p mamy fonty na 12px a ponizej mamy letter-spacing jako 0.2em - wynikiem bedzie 2.4px.

Jesli chodzi o em'sy - to analogicznie jest w przypadku innych właściwości:
word-spacing
line-height (tu tylko uwazamy zeby nie bylo ponizej 1 bo linie beda zachodzic na siebie - wczesniejsza uwaga)

Lekcja-35
PARAGRAPH SPACING
Pliki robocze - index.html ten sam syntax czyscimy
w naszym css okreslamy dla p rozmiar tekstu na 14px i wysokosc lini na 2em (jak wczesniejsza lekcja wyjasnia - znaczy ze jest wzieta wartosc z rozmiaru x2 czyli 28px). Z tad wynika ze fonty mja 14px wiec 14 bedzie na odleglosci - w praktyce wyglada to tak ze 7px bedzie na gore i 7 na dół.
Teraz - wracajac do paragrafów - aby okreslic przestrzen pomiedzy nimi posluzymy sie wlasciwoscią:
margin-bottom
Nadajemy mu wartosc 32px
W ten sam sosob mozemy okreslic przestrzen poprzez
margin-top -left -right.
Nadajac margines dla dołu paragrafu mowimy przegladarce zeby zanim wyswietli kolejny par ma wstawic 32px przestrzeni.
Sprawdzamy w przegladarce - jest teraz 32px na dole kazdego paragrafu. Wlaczmy tryb inspekcji przegladarki (Chrome F12) i widzimy ze gorna przestrzen paragrafów jest o wiele mniejsza - to dlatego ze DBS je okrela. My nadalismy wartość tylko dla dolnego marginesu.

Lekcja-36
THE BOX MODEL
Co sie kryje pod pojęciem modelu pudełkowego (Box Model). Jest to sposób przentowania sie kazdego elementu na stronie w zdefiniowanej przestrzeni. Kazdy element html wg modelu pudełkowego posiada:
szerokosc i wysokosc (width, height)
padding - przestrzen wewn okalajaca zwymiaowany wczesniej element
border - ramka o okreslonej grubosci (takze stylu jesli chcemy)
margin - margines jaki dzieli border od sasiadujacego elementu.

Pliki robocze
index.html - zmieniamy; wyczyszczony syntax.css
W index tworzymy 2 sekcje z klasa box - obje wraz z nagowkiem sa w okalajacym divie z id main-content.
w css stylizujemy objekty z klasa box - wiec .box{...} Wewnatrz deklaracji wstawiamy wszystkie wymienione wczesniej właściwości z koqnkretnymi wartościami - patrz przyklad.

Sprawdzamy w przegladarce - z wykorzystaniem developerskiego narzedzia do inspekcji kodu - F12.
Widzimy wszystkie wspomniane elementy opisujące wg modelu pudełkowego.

W nazym przykładzie widzimy ze prawy margines jest rozciagniety do konca w prawo - dlatego ze mamy do czynienia z poziomem elementow blokowych - a te wypelniaja cala przestrzen "wiersza" i jesli po prawej stronie nic nie ma przegladarka automatycznie dodaje margines wypełqniając calą przestrzen.

Uwaga - mamy tu 2 elementy (divy z klasami box) a przestrzen pomiedzy nimi jest tylko 30 podczas gdy kazdy z nich ma 30px margin - powinno byc 60... To jest z powodu rzeczy ktora omowimy w kolejnych lekcja a nazywa sie vertical margin collapse. Krótko - kiedy sa 2 elementy z poziomymi marginesami jeden pod drugim to brany jest margines gornego elementu.

Teraz - patrzymy co sie stanie gdy usuniemy wymiary kontentu, elementu. Sprawdzamy. Dlaczego szerokosc elementu sie wydluzyla - bo gdy nie okreslimy jego szerokosci - w pudelkowym modelu element zajmuje soba cala przestrzen dla siebie (wiersz). Co do wysokosci to przyjmuje domyslna wlasciwosc dla danego kontentu - np p tagu. Czyli szerokosc CALOSCI wypelnia 100% dostepnej szerokosci.

Teraz Co jesli okreslimy szerokosc KONTENTU (w modelu pudelkowym jako element) na 100% Sprawdzamy calosc "wyjdzie" nam poza dostepny obszar! Dlaczego - bo wartosc 100% dotyczy elementu, kontentu a nie calosci - do tego 100% dostepnej szerokosci doliczone jest padding + border + margin!.

Lekcja-37
Różne sposoby oreslania wlasciwosci margin:

1dna wartosc - znaczy dookoła tak samo
4ry wartosci - osobno dla kazdego boku (zgodnie z ruchem wsk zegara)
2wie wartosci - gora-dol i lewy-prawy
3y wrtosci gora prawy dol - UWAGA lewy bedzie taki sam jak prawy

ZAŁAMYWANIE MARGINESÓW - vertical margin collapse
Polega na redukcji marginesow pomiedzy dwoma sasiadujacymi elementami ktore je maja.
Jesli sa takie same to brany jest z gornego el (bedzie polowa sumy)
Jesli sa rozne to brany jest wiekszy
Praca w oknie narzedzia chrome'a do insp kodu. Tam mozemy na potrzeby testow zienic wartosci margin.
Np na 30 15 15 15 - sprawdzamy ze teraz pomiedzy oba elementami jest 30 bo marginesy na styku to 15 (dolny gornego el) i 30 (gorny dolnego el) - brany jest 30.

Okreslamy width elementu na 300px. Teraz chcemy umiescic je na srodku czyli okreslic taki margines dla lewegi i prawego boku zeby el byl na srodku. Przypadek taki gdy nie znamy wielkosci kontenera w ktorym elementy sie znajduja. W tej sytuacji mozemy uzyc takiej wartosci da margin:
margin: 30px auto; - ktoremowi ze gora-dol po 30px a lewy-prawy taki aby nasz box byl dokladnie po srodku.

Podobny efekt do powyzszego mozemy oiagnac wkorzystujac wartosci procentowe:
ustawiamy szerokosc el na 50%
Teraz aby bylo 100 - wiemy ze w margin lewy i prawy maja miec po 25%
Usuwamy pading bo bedzie przeszkadzal w uzyskaniu efektu. Sprawdzamy - jest OK

Lekcja-38
PADDING
Pliki robocze jak poprzednio. W syntax ustwaiamy style dla el z klasa box: margin, padding i border.
W przypadku padding wartosci okreslamy takze na rozne sposoby - analogicznie jak przy margin.
Tez mozemy korzystać z wartosci procentowych.

Lekcja-39
MARGIN & PADDING - LONG-HAND VERSIONS
Do tej pory uzywalismy "krotkiej wersji - margin czy padding. stnieją dluzsze ktore sa dla konkretnych stron:
margin-top
margin-right
margin-bottom
margin-left

Analogicznie dla padding
Cel: np gdy mamy juz isniejaca regule (np w inej klasie dla tego samego elementu) gdzie wszystkie strony sa ustawione - a chcemy nadpisac tylko jedna strone - patrz przyklad w syntax.css

Lekcja-40
BORDERS
Pliki robocze: index.html - zmieniamy: w sekcji div z main-content tworzymy 8 podsekcji z podwojnymi klasami: kazda ma box'a a drugą odpowiednio dla pozniejszego ostylizowania rodzaju linii ramki (border).
W syntax najpierw podstawowa stylizacja dla klasy .box (padding margin float) pozniej kazda z 8 klas dodatkowych ale narazie bez deklaracji.

Pare słów o border - to jak wiemy - jeden z elementow modelu pudełkowego (The Box Medel) - jest jakby prymitywnym elementem na zewn padding ale przed margin. Właściwość border posiada 3 cechy-wartosci:
width (szerokosc linii) i rodzaj (style) i kolor (colour). Własciwosci dla border'a maja rozna postać:
long-heand i short-heand.

Stylizujemy wszystkie dodatkowe klasy korespondujące do ich stylu. Sprawdzamy - Nie wszystkie przyjely styl jaki chcielismy. Dlaczego? - bo szerokosc linii jest za mala - zwiekszamy by poprawic to.

Lekcja-41
BLOCK LEVEL ELEMENTS
Robimy w index po 3x divy z klasami block i 3 spany z klasami inline
w scc nadajemy klasom padding marging i border (w kursie jest po 10 ale wtedy w niektorych przeladarkach linie sa niewidocne - ustawilem na 20px)
Wyswietlamy:
Widzimy ze divy ustawione sa jeden-pod-drugim - to dlatego ze sa one Block-Level Elementami. Wypelniaja soba cala przestrzen wiersza (row). Tak działaja BLE - bloki zajmuja caly wiersz. Istnieje wiele BLE.
DIV jest jednym z nich. Na W3 jest lista tagow ktore sa BLE.

Co do span'ów - to juz nie BLE tylo Inline Elements (IE) tutaj tez obowiazuje model pudełkowy (TheBlockModel) ale IE maja juz taka wlasciwosc ze nie zajmuja calego wiersza tylko ustawiaja jeden-za-drugim. Co wazne marginy poziome (top-bottom) nie sa kontrolowane dla tego jesli elementow typu IE jest wiecej niz zmiesci sie w wierszu to el z dolnego wiersza beda nachodzic na el w gornym wierszu!

Co mozemy zrobic? - mozemy wymusic zeby IE wyswietlaly sie tak samo jak BLE Jak? Tak:
wlasciwosc:
display: block;
ALE my chcemy zeby bylo jak IE ale tez jak BLE Jak to zrobimy?
display: inline-bolck;

Na koniec przyklad zastsowania - linki
Wyswietlanie inline w zaleznosci od radzaju przegladarki - mozemy sprawdzic na caniuse.com

Lekcja-42
WIDTH & HEIGHT
PLiki robocze pusty syntax, w index tworzymy 4 divy z 4 roznymi klasami - jak w pliku.
Czyli mamy cztery elementy na stronie.
Poznajemy jaki wpływ na szerokkość tych elementow ma sposób podawania jej wartosci - statycznie w px i procentowo.

Ustalamy width 
statycznie dla 1go 
procentowo dla 2go

Teraz chcemy abu 2 dolne divy 
miały procentowy width i 
byly traktowane jak IE (inline elements)
dopisujemy wlasciwosc
display: inline-block (jak w odwrotnej sytuacji w poprzedniej lekcji)

W obu przypadkach zminiejszamy okno przegladarki i obserwujemy jak sie zachowują nasze elementy:
jesli mocna zwezimy okno to 1szy el wyjdzie poza obszar rodzica (div z id main-contenet) - bo width ma na stale statycznie.
2gi TEZ bedzie sie kurczyl razem z oknem i obszarem rodzica - zawsze zachowujac procentowa wartosc width.

3ci i 4ty element ustawia sie jeden-obok-drugiego i tez beda sie kurczyc jak w 2gim el.

Lekcja-43
ROUNDED CORNERS - zaokrąglanie rogów.
PLiki robocze - dokladnie te same co na poprzedniej lekcji - nie czyscimy syntax'a
Wprowadzamy zaokraglanie.
Mozemy ustawic oddzielnie dla kazdego - analogicznie jak w przypadku marginesow - zgodnie z ruchem wsk zegara.
Zaczyanamy od ustawienia dla wszystkich. Wlasciwosc:
border-radius:
wartosc ustwiamy na 10px potem sprawdzamy 30px
Potem wprawadzamy sposob gdzie jontrolujemy kazdy rog - ustawiamy w 2giej klasie w css.
Potem z dwiema wartosciami - tu uwaga troche inaczej jak z margin czy padding - X - patrz przyklad.

Na koniec robimy takie zaokraglenia aby powstal okrag.
W ost klasie czyscimy deklaracje i ustawiamy statycznie el 100x100 potem -radius na 50px.

Lekcja-44
BACKGROUNDS
Pliki robocze index i syntax
zmieniamy troche index - zostawiamy jeden div z klasa static-width, czyscimy syntax- i ustawiamy style dla klasy .static-width. - width i height.
Probujemy rozne wlasciwosci zwiazane z tlem: 

bacground-<\/>
	 -color
	 -image url(x) x - adres do obrazka
	 -repeat (wiele mozliwosc jak bez powtorzen, round - rowno przy bokach zmiejszajac rozm, ...
	 -position (mamy wiele mozliwosci jak center, [2-wart left/center/right top/center/bottom], [2-wart 			   od-lewej od-gory] w px lub %
	 -size (px)

Lekcja-45
BACKGROUNG SHORTHAND
Krotszy sposob stylizowania wlasciwoscia bacground. Wiele wersji z poprzedniej lekcji da sie zapisac w krotszej wersji - za pomoca pojedynczego background.
Pliki robocze dokladnie takie same i niemienione z poprzedniej lekcji - index isyntax.
W css zakomentujemy wesje z lekcji 44 i pokazujemy jak wiekszosc z dlugich wersji zastapimy krotsza.

Wartości wersji dluzszej musa byc w odpow kolejnosci 
- u nas: 
wart-url > wartosc-repeat > poz-vert poz-horiz

Mozna zapisac wiecej dluzszych wersji w krotszej ale moze to prowadzic do zamieszania, a czasami jest wskazane uzyc jednak dlugiej wersji - jak np w naszym przyp color. Gdybysmy zapisali go przed url to obrazek zalkowicie by go przykryl-nadpisal, a jesli zapiszemy go odzielnie pod spodem w dluzszej wersji - to nawet w przypadku niewyswietenia obrazka tlo z dansym kolorem bedzie ustwione.

Lekcja-46
MULTIPLE BACKGROUNDS
Pliki robocze - index: zmieniamy zagniezdzony div z klasa na div z id banner, syntax - czyscimy i przygotowujemy linki do 2 obrazkow.
W css nadajemy styl dla diva zid banner czyli selektor .banner{}
Ustawiamy kolr tla na szary, szerokosc na 100% i wys na 300px.

Teraz wstawiamy tla (oba) - zasada jest taka ze jedno od drugiego musi byc oddzielone ","
Potem ustawiamy inne wlasciwosci ALE tym razem beda qone dotyczyc obu obrazków: tu takze odpowiednio - 1sza wartosc bedzie dotyczyc 1szego obrazka, a 2ga drugiego.
UWAGA: Kiedy obie wartosci beada identyczne mozeby zrezygnowac z podwojnego zapisu.
Na koniec okreslamy rozmiar dla 1szego w px a dla 2go w % - chodzi o szerokosc tla. 
Gdyby 2gi byl waski i nie porylby calej wysokosci tla (tylko szerokosc) to mozemy drugia wartoscia 100% rozciagnac na cala wys.

Lekcja-47
COLOR (Background)
Pliki robocze: index ten sam - syntax czyscimy i umieszczamy tylko deklaracja dla .banner okreslajaca rozmairy el.
Poznajemy rodzaje wartosci tej wlasciwosci. Wartosc kolou mozemy podawać na kilka sposobow. Na tej lekcji pznajemy:
szesnastkowo: Na poczatku wrtosci piszemy"#" Potem: 6 cyfr - 3 pary odpowiednio dla kanałów R, G, i B. Wartosc dla kazdego kanału okreslana  jest szesnastkowo tzn 00 do ff. Gdy zmieniamy tyko jakis kanal przy zerowej wartosci pozostalych to operujemy ciemny-jasny danego koloru np 500000 to bedzie ciemny czerwony itd. 000000 to czarny a ffffff to biały. Mieszajac odpowiednio kanały tworzymy nowe kolory.

przez rgb: qpodajemy wartoscia ostaci rgb(X, X, X), gdzie X to odpowiednio kanał R, G, B o wartosciach 10tnych od 0 do 255.

Lekcja-48
OPACITY - przezroczystosc tła
Pliki robbocze to index i syntax
W index mamy tylko zagniezdzone nowe divy z roznymi id, ktore to nadaja im style okreslone w naszym css.
Kazdy z nich to okrag zrobiony z zaokraglenia rogów bordera, kazdy ma inna pozycje i inny kolor

Dodajemy im przezroczystosc poprzez wlasciwosc:
opacity - jej wartosc zawiera sie od 0 do 1 - okresla skale przezroczystosci
Potem wpisujemy w htmlu teksty do kazdego z naszych 3 divow - pokazujemy ze przezroczystkosc takze ich dotyczy! (przy okazji ustawiamy teksty centralnie w gornej cz)
Jak mozemy zrobic zeby tylko tlo bylo przezroczyste?
Jest na to sposob - mianowicie zamiana sposobu okreslenia kolor dla tla na:

 - rgba() - gdzie a to kanal alfa (przezroczystosci), W takim przypadku wlasciwosc opacity juz qnie jest 		    nam potrzbna.

Teraz tekst wyswietlany jest jako solid - tylko tło jest przezroczyste.

Lekcja-49
GRADIENS
Co to jest gradjent - płynne przejscie z jednego koloru do drugiego lub jasniejszego do ciemniejszego.
Wykorzystamy efekt gradjentu do zbudowania fajnie wygladającego przycisku.
Pliki robocze: index.html - w nim tylko zagniezdzony w glownym divie a link z klasa button i tekstem "Click me". Synstax.css czyscimy i okreslamy styl dla naszej klasy button. W deklaracji mamy nast wlasciwosci:
display
width
padding
border
font-family
tekst-transform
color
font-size
text-align
border-radius
background

Zanim wstawimy nasz gradient zostawiamy nasze ww tlo jak jest bo nektore starsze przegladrki nie obsluguja gradientow.
Gradienty wstawiamy za pomoca pary wlasciwosci background i jej wartości linear-gradeint() - jak nizej:
background: linear-gradient(x, x x, x x) - gdzie iks-y to argumenty tej wrtosci np:
background: linear-gradient(top, #ffaaaa 0%, #aaffff 100%)
wyjasnienie argumentow:
top - od jakiej strony ma sie gradient zaczac. Tu od gory do dołu
1szy kolor #... - od jakiego koloru ma sie zaczac przejscie
0% - zaczyna sie od samej góry (przejscie zachodzi od samego poczatku). U nas od samej góry.
2gi kolor #... - kolor na jaki chcemy przejsc
100% zakonczenie ma byc na samym dole.

Uwaga: Gradienty to relatywnie nowa funkcja i jesli nasza przegladarka jej nie obsluzy musimy zastosowac ponizsze wpisy wykorzystujące tzw vendor-prefx PRZED WARTOSCIA:
background: -moz-linear-gradient(top, #ffaaaa 0%, #aaffff 100%)
background: -webkit-linear-gradient(top, #ffaaaa 0%, #aaffff 100%)
background: linear-gradient(top, #ffaaaa 0%, #aaffff 100%)

Te wpisy musza byc w kolejnosci - kaskada - czyli bierz background wtedy jesli 1 to ok jesli nie to 2gi jesli nie to 3ci.

-moz- - firefox
-webkit- - safari opera chrome...

Teraz na koniec robimy efekt z hover
Wklejamy do deklaracji z nasza "hoverow'ym buttonem" (#button:hover{...}) wszystkie nasze wlasciwosci dot tła. Tutaj w naszym 1szym tle gdzie jest qbez gradientu zmieniamy kolor na 2gi, a w tłach gradientowych zamieniamy kierunek przejscia z top-bottom na bottom-top (czyli ustawiamy na bottom).

W celdu przetestowania gradientow wczesniej i pozniejszego copy-paste sugerowana strona:
http://www.colorzilla.com/gradient-editor/


